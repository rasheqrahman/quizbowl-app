{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState, useCallback } from \"react\";\nconst API_KEY = \"AIzaSyC0v6QdHcNAD2bBp7IE1OdZwdD4jeePXQE\";\nconst VOICES_ENDPOINT = `https://texttospeech.googleapis.com/v1/voices?key=${API_KEY}`;\nconst SYNTH_ENDPOINT = `https://texttospeech.googleapis.com/v1/text:synthesize?key=${API_KEY}`;\nexport default function useGoogleCloudTTS() {\n  _s();\n  const [voices, setVoices] = useState([]);\n  const [selectedVoice, setSelectedVoice] = useState(null);\n  const [loadingVoices, setLoadingVoices] = useState(false);\n  const [errorVoices, setErrorVoices] = useState(null);\n  const [loadingSpeak, setLoadingSpeak] = useState(false);\n  const [errorSpeak, setErrorSpeak] = useState(null);\n  const [speaking, setSpeaking] = useState(false);\n  const [paused, setPaused] = useState(false);\n  const audioRef = useRef(null);\n\n  // Fetch English voices\n  useEffect(() => {\n    setLoadingVoices(true);\n    fetch(VOICES_ENDPOINT).then(res => res.json()).then(data => {\n      let englishVoices = (data.voices || []).filter(v => v.languageCodes.some(code => code.startsWith('en-')));\n      englishVoices.sort((a, b) => a.name > b.name ? 1 : -1);\n      setVoices(englishVoices);\n      // Default: en-US Wavenet, else en-US, else first\n      let def = englishVoices.find(v => v.name.includes('en-US') && v.name.includes('Wavenet')) || englishVoices.find(v => v.name.includes('en-US')) || englishVoices[0];\n      setSelectedVoice(def || null);\n      setErrorVoices(null);\n    }).catch(e => setErrorVoices(e.message || 'Failed to fetch voices')).finally(() => setLoadingVoices(false));\n  }, []);\n\n  // Audio event listeners\n  useEffect(() => {\n    const audio = audioRef.current;\n    if (!audio) return;\n    const handleEnded = () => {\n      setSpeaking(false);\n      setPaused(false);\n    };\n    const handlePause = () => {\n      setPaused(true);\n    };\n    const handlePlay = () => {\n      setSpeaking(true);\n      setPaused(false);\n    };\n    audio.addEventListener('ended', handleEnded);\n    audio.addEventListener('pause', handlePause);\n    audio.addEventListener('play', handlePlay);\n    return () => {\n      audio.removeEventListener('ended', handleEnded);\n      audio.removeEventListener('pause', handlePause);\n      audio.removeEventListener('play', handlePlay);\n    };\n  }, []);\n\n  // Synthesize speech\n  const speak = useCallback(async (text, voiceOverride) => {\n    if (!API_KEY) {\n      setErrorSpeak('Missing Google Cloud API key');\n      return;\n    }\n    setLoadingSpeak(true);\n    setErrorSpeak(null);\n    setPaused(false);\n    setSpeaking(false);\n    try {\n      var _ref, _ref2;\n      const body = {\n        input: {\n          text\n        },\n        voice: {\n          languageCode: ((_ref = voiceOverride || selectedVoice) === null || _ref === void 0 ? void 0 : _ref.languageCodes[0]) || 'en-US',\n          name: ((_ref2 = voiceOverride || selectedVoice) === null || _ref2 === void 0 ? void 0 : _ref2.name) || 'en-US-Wavenet-D'\n        },\n        audioConfig: {\n          audioEncoding: 'MP3'\n        }\n      };\n      const res = await fetch(SYNTH_ENDPOINT, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n      });\n      if (!res.ok) throw new Error('Failed to synthesize speech');\n      const data = await res.json();\n      if (!data.audioContent) throw new Error('No audio content returned');\n      const audio = audioRef.current;\n      audio.src = `data:audio/mp3;base64,${data.audioContent}`;\n      audio.play();\n      setSpeaking(true);\n      setPaused(false);\n    } catch (e) {\n      setErrorSpeak(e.message || 'Speech synthesis failed');\n    } finally {\n      setLoadingSpeak(false);\n    }\n  }, [selectedVoice]);\n  const pause = useCallback(() => {\n    const audio = audioRef.current;\n    if (audio && !audio.paused) audio.pause();\n  }, []);\n  const resume = useCallback(() => {\n    const audio = audioRef.current;\n    if (audio && audio.paused) audio.play();\n  }, []);\n  const stop = useCallback(() => {\n    const audio = audioRef.current;\n    if (audio) {\n      audio.pause();\n      audio.currentTime = 0;\n      setSpeaking(false);\n      setPaused(false);\n    }\n  }, []);\n  return {\n    voices,\n    selectedVoice,\n    setSelectedVoice,\n    loadingVoices,\n    errorVoices,\n    speak,\n    loadingSpeak,\n    errorSpeak,\n    speaking,\n    paused,\n    pause,\n    resume,\n    stop,\n    audioRef\n  };\n}\n_s(useGoogleCloudTTS, \"wKxrzj2OuqjTXr1ZZCXy1o9vWFE=\");","map":{"version":3,"names":["useEffect","useRef","useState","useCallback","API_KEY","VOICES_ENDPOINT","SYNTH_ENDPOINT","useGoogleCloudTTS","_s","voices","setVoices","selectedVoice","setSelectedVoice","loadingVoices","setLoadingVoices","errorVoices","setErrorVoices","loadingSpeak","setLoadingSpeak","errorSpeak","setErrorSpeak","speaking","setSpeaking","paused","setPaused","audioRef","fetch","then","res","json","data","englishVoices","filter","v","languageCodes","some","code","startsWith","sort","a","b","name","def","find","includes","catch","e","message","finally","audio","current","handleEnded","handlePause","handlePlay","addEventListener","removeEventListener","speak","text","voiceOverride","_ref","_ref2","body","input","voice","languageCode","audioConfig","audioEncoding","method","headers","JSON","stringify","ok","Error","audioContent","src","play","pause","resume","stop","currentTime"],"sources":["/Users/rasheqrahman/Desktop/naqt-quizbowl-app/src/hooks/useGoogleCloudTTS.js"],"sourcesContent":["import { useEffect, useRef, useState, useCallback } from \"react\";\n\nconst API_KEY = \"AIzaSyC0v6QdHcNAD2bBp7IE1OdZwdD4jeePXQE\";\nconst VOICES_ENDPOINT = `https://texttospeech.googleapis.com/v1/voices?key=${API_KEY}`;\nconst SYNTH_ENDPOINT = `https://texttospeech.googleapis.com/v1/text:synthesize?key=${API_KEY}`;\n\nexport default function useGoogleCloudTTS() {\n  const [voices, setVoices] = useState([]);\n  const [selectedVoice, setSelectedVoice] = useState(null);\n  const [loadingVoices, setLoadingVoices] = useState(false);\n  const [errorVoices, setErrorVoices] = useState(null);\n  const [loadingSpeak, setLoadingSpeak] = useState(false);\n  const [errorSpeak, setErrorSpeak] = useState(null);\n  const [speaking, setSpeaking] = useState(false);\n  const [paused, setPaused] = useState(false);\n  const audioRef = useRef(null);\n\n  // Fetch English voices\n  useEffect(() => {\n    setLoadingVoices(true);\n    fetch(VOICES_ENDPOINT)\n      .then(res => res.json())\n      .then(data => {\n        let englishVoices = (data.voices || []).filter(v => v.languageCodes.some(code => code.startsWith('en-')));\n        englishVoices.sort((a, b) => (a.name > b.name ? 1 : -1));\n        setVoices(englishVoices);\n        // Default: en-US Wavenet, else en-US, else first\n        let def = englishVoices.find(v => v.name.includes('en-US') && v.name.includes('Wavenet')) ||\n                  englishVoices.find(v => v.name.includes('en-US')) ||\n                  englishVoices[0];\n        setSelectedVoice(def || null);\n        setErrorVoices(null);\n      })\n      .catch(e => setErrorVoices(e.message || 'Failed to fetch voices'))\n      .finally(() => setLoadingVoices(false));\n  }, []);\n\n  // Audio event listeners\n  useEffect(() => {\n    const audio = audioRef.current;\n    if (!audio) return;\n    const handleEnded = () => { setSpeaking(false); setPaused(false); };\n    const handlePause = () => { setPaused(true); };\n    const handlePlay = () => { setSpeaking(true); setPaused(false); };\n    audio.addEventListener('ended', handleEnded);\n    audio.addEventListener('pause', handlePause);\n    audio.addEventListener('play', handlePlay);\n    return () => {\n      audio.removeEventListener('ended', handleEnded);\n      audio.removeEventListener('pause', handlePause);\n      audio.removeEventListener('play', handlePlay);\n    };\n  }, []);\n\n  // Synthesize speech\n  const speak = useCallback(async (text, voiceOverride) => {\n    if (!API_KEY) {\n      setErrorSpeak('Missing Google Cloud API key');\n      return;\n    }\n    setLoadingSpeak(true);\n    setErrorSpeak(null);\n    setPaused(false);\n    setSpeaking(false);\n    try {\n      const body = {\n        input: { text },\n        voice: {\n          languageCode: (voiceOverride || selectedVoice)?.languageCodes[0] || 'en-US',\n          name: (voiceOverride || selectedVoice)?.name || 'en-US-Wavenet-D',\n        },\n        audioConfig: {\n          audioEncoding: 'MP3',\n        },\n      };\n      const res = await fetch(SYNTH_ENDPOINT, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(body),\n      });\n      if (!res.ok) throw new Error('Failed to synthesize speech');\n      const data = await res.json();\n      if (!data.audioContent) throw new Error('No audio content returned');\n      const audio = audioRef.current;\n      audio.src = `data:audio/mp3;base64,${data.audioContent}`;\n      audio.play();\n      setSpeaking(true);\n      setPaused(false);\n    } catch (e) {\n      setErrorSpeak(e.message || 'Speech synthesis failed');\n    } finally {\n      setLoadingSpeak(false);\n    }\n  }, [selectedVoice]);\n\n  const pause = useCallback(() => {\n    const audio = audioRef.current;\n    if (audio && !audio.paused) audio.pause();\n  }, []);\n\n  const resume = useCallback(() => {\n    const audio = audioRef.current;\n    if (audio && audio.paused) audio.play();\n  }, []);\n\n  const stop = useCallback(() => {\n    const audio = audioRef.current;\n    if (audio) {\n      audio.pause();\n      audio.currentTime = 0;\n      setSpeaking(false);\n      setPaused(false);\n    }\n  }, []);\n\n  return {\n    voices,\n    selectedVoice,\n    setSelectedVoice,\n    loadingVoices,\n    errorVoices,\n    speak,\n    loadingSpeak,\n    errorSpeak,\n    speaking,\n    paused,\n    pause,\n    resume,\n    stop,\n    audioRef,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}